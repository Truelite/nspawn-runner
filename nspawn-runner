#!/usr/bin/env python3

from __future__ import annotations
from typing import Optional, List, Dict, Any, Set
import argparse
import logging
import subprocess
import tempfile
import json
import os
import sys
import shlex
import shutil

log = logging.getLogger("nspawn-runner")

# Import YAML for parsing only. Prefer pyyaml for loading, because it's
# significantly faster
try:
    import yaml

    def yaml_load(file):
        return yaml.load(file, Loader=yaml.CLoader)
except ModuleNotFoundError:
    try:
        import ruamel.yaml

        yaml_loader = ruamel.yaml.YAML(typ="safe", pure=True)

        def yaml_load(file):
            return yaml_loader.load(file)
    except ModuleNotFoundError:
        def yaml_load(file):
            raise NotImplementedError("this feature requires PyYaml or ruamel.yaml")

def systemd_version():
    res = subprocess.run(["systemd-nspawn", "--version"], check=True, capture_output=True, text=True)
    return int(res.stdout.splitlines()[0].split()[1])

CONFIG_DIR = "/etc/nspawn-runner"
DATA_DIR = "/var/lib/nspawn-runner"

SYSTEMD_VERSION = systemd_version()
EATMYDATA = shutil.which("eatmydata")


def run_cmd(cmd: List[str], **kw) -> subprocess.CompletedProcess:
    """
    Run a command, logging it
    """
    kw.setdefault("check", True)
    log.info("Running %s", " ".join(shlex.quote(c) for c in cmd))
    return subprocess.run(cmd, **kw)


class Fail(RuntimeError):
    """
    Exception raised when the program should exit with an error but without a
    backtrace
    """
    pass


class Success(Exception):
    """
    Exception raised when a command has been successfully handled, and no
    further processing should happen
    """
    pass


#
# Backend implementation
#

class NspawnRunner:
    """
    Common nspawn-runner implementation, subclassed for traditional filesystem
    and btrfs filesystems
    """
    def __init__(self, root_dir: str):
        self.src_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
        self.root_dir = root_dir
        self.gitlab_build_dir = os.path.join(self.root_dir, ".build")
        self.gitlab_cache_dir = os.path.join(self.root_dir, ".cache")

    @classmethod
    def create(cls, root_dir: str, ram_disk: bool):
        """
        Instantiate the right NspawnRunner subclass for this sytem
        """
        if ram_disk:
            return TmpfsRunner(root_dir)

        # Detect filesystem type
        res = subprocess.run(
            ["stat", "-f", "-c", "%T", root_dir],
            check=True, text=True, stdout=subprocess.PIPE)
        fstype = res.stdout.strip()
        if fstype == "btrfs":
            return BtrfsRunner(root_dir)
        else:
            return OverlayRunner(root_dir)

    def setup(self):
        """
        Make sure all needed work directories exist
        """
        os.makedirs(self.root_dir, exist_ok=True)
        os.makedirs(self.gitlab_build_dir, exist_ok=True)
        os.makedirs(self.gitlab_cache_dir, exist_ok=True)

    def get_machine(self, run_id: str) -> "Machine":
        """
        Create a Machine object to manage a CI run
        """
        raise NotImplementedError(f"{self.__class__.__name__}.get_machine not implemented")

    def get_chroot(self, image_name: str) -> "Chroot":
        """
        Create a Run object to manage a CI chroot
        """
        raise NotImplementedError(f"{self.__class__.__name__}.get_chroot not implemented")

    def scan_chroots(self) -> List["Chroot"]:
        """
        Enumerate yaml configuration files and subdirectories of
        ``/var/lib/nspawn-runner/``, merge results, and return the resulting
        list of Chroot objects
        """
        found: Set[str] = set()

        # List yaml files in CONFIG_DIR
        if os.path.isdir(CONFIG_DIR):
            for fn in os.scandir(CONFIG_DIR):
                if fn.name.startswith("."):
                    continue
                for ext in (".yaml", ".yml"):
                    if fn.name.endswith(ext):
                        found.add(fn.name[:-len(ext)])

        if os.path.isdir(self.root_dir):
            for fn in os.scandir(self.root_dir):
                if fn.name.startswith("."):
                    continue
                # List directories in self.root_dir
                if fn.is_dir():
                    found.add(fn.name)
                    continue
                # List yaml files in self.root_dir
                for ext in (".yaml", ".yml"):
                    if fn.name.endswith(ext):
                        found.add(fn.name[:-len(ext)])

        return [self.get_chroot(name) for name in found]


class Machine:
    """
    Manage a CI machine
    """
    def __init__(self, nspawn_runner: NspawnRunner, run_id: str):
        self.nspawn_runner = nspawn_runner
        self.run_id = run_id
        self.machine_name = f"run-{self.run_id}"

    def _run_nspawn(self, chroot: "Chroot", cmd: List[str]):
        """
        Run the given systemd-nspawn command line, contained into its own unit
        using systemd-run

        It uses exec, so this function, when successful, never returns and
        destroys the calling process
        """
        unit_config = [
            'KillMode=mixed',
            'Type=notify',
            'RestartForceExitStatus=133',
            'SuccessExitStatus=133',
            'Slice=machine.slice',
            'Delegate=yes',
            'TasksMax=16384',
            'WatchdogSec=3min',
        ]

        cpu_weight = chroot.config.get('cpu_weight', 50)
        if cpu_weight is not None:
            log.debug('CPU accounting enabled')
            unit_config.append("CPUAccounting=yes")
            unit_config.append(f"CPUWeight={cpu_weight}")

        memory_high = chroot.config.get('memory_high', '40%')
        if memory_high is not None:
            log.debug('Memory accounting enabled (high)')
            if not "MemoryAccounting=yes" in unit_config:
                unit_config.append("MemoryAccounting=yes")
            unit_config.append(f"MemoryHigh={memory_high}")

        memory_max = chroot.config.get('memory_max', '40%')
        if memory_max is not None and SYSTEMD_VERSION >= 249:
            log.debug('Memory accounting enabled (max)')
            if not "MemoryAccounting=yes" in unit_config:
                unit_config.append("MemoryAccounting=yes")
            unit_config.append(f"MemoryMax={memory_max}")

        systemd_run_cmd = ["systemd-run"]
        if not chroot.config.get('seccomp', False):
            systemd_run_cmd.append("--setenv=SYSTEMD_SECCOMP=0")

        for c in unit_config:
            systemd_run_cmd.append(f"--property={c}")

        systemd_run_cmd.extend(cmd)
        systemd_run_cmd.extend(chroot.config.get('args', []))

        log.info("Running %s", " ".join(shlex.quote(c) for c in systemd_run_cmd))
        os.execvp(systemd_run_cmd[0], systemd_run_cmd)

    def _get_nspawn_command(self, chroot: "Chroot") -> List[str]:
        """
        Return the command to use to start systemd-nspawn
        """
        res = [
            "systemd-nspawn", "--quiet",
            f"--directory={chroot.chroot_dir}",
            f"--machine={self.machine_name}",
            "--boot", "--notify-ready=yes"]

        if SYSTEMD_VERSION >= 250:
            res.append("--suppress-sync=yes")
        return res

    def start(self, chroot: "Chroot"):
        """
        Start this machine on the given chroot

        The last start command is run with exec, so this function, when
        successful, never returns and destroys the calling process
        """
        raise NotImplementedError(f"{self.__class__.__name__}.start not implemented")

    def run(self, shell: str, script: str):
        """
        Run the given script inside the machine, using the given shell

        The last command is run with exec, so this function, when
        successful, never returns and destroys the calling process
        """
        cmd = [
            "systemd-run", "--quiet", "--pipe", "--wait",
            f"--machine={self.machine_name}", shell
        ]

        log.info("Running %s", " ".join(shlex.quote(c) for c in cmd))
        with open(script, "rb") as fd:
            res = subprocess.run(cmd, stdin=fd)

        if res.returncode != 0:
            raise Fail(f"Run script exited with code {res.returncode}")

    def terminate(self):
        """
        Terminate this machine
        """
        raise NotImplementedError(f"{self.__class__.__name__}.terminate not implemented")


class OverlayMachine(Machine):
    """
    Machine implemenation for traditional filesystems
    """
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.overlay_dir = os.path.join(self.nspawn_runner.overlays_dir, self.machine_name)

    def _get_nspawn_command(self, chroot: "Chroot") -> List[str]:
        res = super()._get_nspawn_command(chroot)
        res.append(f"--overlay={chroot.chroot_dir}:{self.overlay_dir}:/")
        return res

    def start(self, chroot: "Chroot"):
        log.info("Starting machine using image %s", chroot.image_name)
        if os.path.exists(self.overlay_dir):
            raise Fail(f"overlay directory {self.overlay_dir} already exists")
        os.makedirs(self.overlay_dir, exist_ok=True)
        self._run_nspawn(chroot, self._get_nspawn_command(chroot))

    def terminate(self):
        try:
            res = subprocess.run(["machinectl", "terminate", self.machine_name])
            if res.returncode != 0:
                raise Fail(f"Run script exited with code {res.returncode}")
        finally:
            if os.path.exists(self.overlay_dir):
                shutil.rmtree(self.overlay_dir)


class BtrfsMachine(Machine):
    """
    Machine implementation for btrfs fileystems
    """
    def _get_nspawn_command(self, chroot: "Chroot") -> List[str]:
        res = super()._get_nspawn_command(chroot)
        res.append("--ephemeral")
        return res

    def start(self, chroot: "Chroot"):
        log.info("Starting machine using image %s", chroot.image_name)
        self._run_nspawn(chroot, self._get_nspawn_command(chroot))

    def terminate(self):
        res = subprocess.run(["machinectl", "terminate", self.machine_name])
        if res.returncode != 0:
            raise Fail(f"Run script exited with code {res.returncode}")


class TmpfsMachine(Machine):
    """
    Machine implementation for a readonly root with a tmpfs overlay
    """
    def _get_nspawn_command(self, chroot: "Chroot") -> List[str]:
        res = super()._get_nspawn_command(chroot)
        res.append("--volatile=overlay")
        # See https://github.com/Truelite/nspawn-runner/issues/10
        # According to systemd-nspawn(1), --read-only is implied if --volatile
        # is used, but it seems that without using --read-only one ostree
        # remains locked and VMs can only be started once from it.
        res.append("--read-only")
        return res

    def start(self, chroot: "Chroot"):
        log.info("Starting machine using image %s", chroot.image_name)
        self._run_nspawn(chroot, self._get_nspawn_command(chroot))

    def terminate(self):
        res = subprocess.run(["machinectl", "terminate", self.machine_name])
        if res.returncode != 0:
            raise Fail(f"Run script exited with code {res.returncode}")


class Chroot:
    """
    Manage a CI chroot
    """
    def __init__(self, nspawn_runner: NspawnRunner, image_name: str):
        self.nspawn_runner = nspawn_runner
        self.image_name = image_name
        self.chroot_dir = os.path.join(nspawn_runner.root_dir, self.image_name)
        self.config = self.load_config()

    def exists(self) -> bool:
        """
        Check if the chroot exists
        """
        return os.path.isdir(self.chroot_dir)

    def must_exist(self):
        """
        Raise Fail if the chroot does not already exist
        """
        if not self.exists():
            available = sorted(x for x in os.listdir(self.chroot_dir) if not x.startswith("."))
            raise Fail(f"{self.chroot_dir} does not exist. Use one of {', '.join(available)}")

    def must_not_exist(self):
        """
        Raise Fail if the chroot does already exists
        """
        if self.exists():
            raise Fail(f"{self.chroot_dir} already exists")

    def create(self, suite: str):
        """
        Create a new chroot.
        """
        raise NotImplementedError(f"{self.__class__.__name__}.create not implemented")

    def remove(self):
        """
        Remove this chroot
        """
        shutil.rmtree(self.chroot_dir)

    def maintenance_login(self):
        """
        Directly log into the chroot, without an ephemeral layer.

        This can be used to perform maintenance on the chroot.

        Login is done with exec, so this function, when successful, never
        returns and destroys the calling process
        """
        cmd = ["systemd-nspawn", "--directory", self.chroot_dir] + self.config.get('args', [])
        log.info("Running %s", " ".join(shlex.quote(c) for c in cmd))
        os.execvp(cmd[0], cmd)

    def config_file_path(self):
        """
        Return the path of the YAML playbook/config file for this chroot.

        Return None if not configuration was found
        """
        for cfgdir in (CONFIG_DIR, self.nspawn_runner.root_dir):
            for ext in ("yaml", "yml"):
                playbook = os.path.join(cfgdir, f"{self.image_name}.{ext}")
                if os.path.exists(playbook):
                    return playbook
        return None

    def load_config(self, path: Optional[str] = None) -> Dict[str, Any]:
        """
        Load the chroot configuration from the playbook/config file, if present
        """
        # Parse config file
        if path is None:
            path = self.config_file_path()
        if path is None:
            return {}
        with open(path, "rt") as fd:
            parsed_playbook = yaml_load(fd)

        # Validate the contents to fit what we can work with
        if not parsed_playbook:
            log.warning("%s: playbook is empty", path)
            return {}
        if not isinstance(parsed_playbook, list):
            log.warning("%s: playbook is not structured as a YAML list", path)
            return {}
        if len(parsed_playbook) > 1:
            log.warning("%s: playbook has %d records, looking for configuration in the first one only",
                        path. len(parsed_playbook))

        # Get playbook variables
        pb_vars = parsed_playbook[0].get("vars")
        if pb_vars is None:
            return {}

        # Extract what we need from the variables
        res: Dict[str, Any] = {}
        prefix = 'nspawn_runner_'
        for key in pb_vars.keys():
            if not key.startswith(prefix):
                continue
            res[key[len(prefix):]] = pb_vars.get(key)

        return res

    def run_playbook(self, pathname=None):
        """
        Run this chroot's playbook
        """
        if pathname is None:
            pathname = self.config_file_path()

        if pathname is None:
            log.warning("%s: playbook not found", self.image_name)
            return

        with tempfile.TemporaryDirectory() as workdir:
            # Write the chroot hack script
            # See https://www.enricozini.org/blog/2021/debian/nspawn-chroot-maintenance
            chroot_cmd = os.path.join(workdir, "nspawn-chroot")
            with open(chroot_cmd, "wt") as fd:
                print('#!/bin/sh', file=fd)
                print('chroot="$1"', file=fd)
                print('shift', file=fd)
                print(' '.join([
                    'exec',
                    'systemd-nspawn',
                    '--console=pipe',
                    '-qD', "$chroot",
                    shlex.join(self.config.get('args', [])),
                    '--', '"$@"'
                ]), file=fd)
                os.fchmod(fd.fileno(), 0o755)

            # Write an ansible configuration
            inventory_fname = os.path.join(workdir, "hosts")
            config_fname = os.path.join(workdir, "config.ini")
            with open(config_fname, "wt") as fd:
                print("[defaults]", file=fd)
                print("nocows = 1", file=fd)
                print(f"inventory = {inventory_fname}", file=fd)

            # Write an ansible inventory for this host only
            with open(inventory_fname, "wt") as fd:
                json.dump({
                    "all": {
                        "hosts": {
                            self.chroot_dir: {
                                "ansible_connection": "chroot",
                                "ansible_chroot_exe": chroot_cmd,
                            }
                        }
                    }
                }, fd, indent=1)

            # Run the playbook
            env = dict(os.environ)
            env["ANSIBLE_CONFIG"] = config_fname
            run_cmd(["ansible-playbook", pathname], env=env)

    def run_maintenance(self):
        """
        Perform maintenance on this chroot
        """
        if self.config_file_path() is None:
            log.error("%s: chroot configuration not found", self.image_name)
            return
        log.info("%s: running maintenance", self.image_name)
        if self.config.get("maint_recreate") and self.exists():
            log.info("%s: removing chroot to recreate it during maintenance", self.image_name)
            self.remove()
        if not self.exists():
            suite = self.config.get("chroot_suite")
            if suite is None:
                log.error("%s: chroot_suite not found in playbook, and chroot does not exist", self.image_name)
                return
            self.create(suite)
        self.run_playbook()


class OverlayChroot(Chroot):
    """
    Chroot implemenation for traditional filesystems
    """
    def create(self, suite: str):
        cmd = []
        if EATMYDATA is not None:
            cmd.append(EATMYDATA)
        cmd += ["debootstrap", "--variant=minbase", "--include=git,dbus,systemd,python3",
                suite, self.chroot_dir]
        run_cmd(cmd)


class BtrfsChroot(Chroot):
    """
    Chroot implementation for btrfs fileystems
    """
    def create(self, suite: str):
        # Create subvolume for chroot
        run_cmd(["btrfs", "subvolume", "create", self.chroot_dir])

        cmd = []
        if EATMYDATA is not None:
            cmd.append(EATMYDATA)
        cmd += ["debootstrap", "--variant=minbase", "--include=git,dbus,systemd,python3",
                suite, self.chroot_dir]
        run_cmd(cmd)

    def _is_subvolume(self) -> bool:
        """
        Check if this chroot is in a subvolume
        """
        cmd = ["btrfs", "subvolume", "show", self.chroot_dir]
        res = subprocess.run(cmd, check=False, capture_output=True, text=True)
        return res.returncode == 0

    def remove(self):
        """
        Remove this chroot
        """
        if self._is_subvolume():
            run_cmd(["btrfs", "subvolume", "delete", self.chroot_dir])
        else:
            super().remove()


class TmpfsChroot(OverlayChroot):
    """
    Chroot implemenation using tmpfs overlay
    """
    pass


class OverlayRunner(NspawnRunner):
    """
    nspawn-runner implementation that runs on traditional filesystem, using
    overlay mounts
    """
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.overlays_dir = os.path.join(self.root_dir, ".overlays")

    def setup(self):
        super().setup()
        os.makedirs(self.overlays_dir, exist_ok=True)

    def get_machine(self, run_id: str) -> "Machine":
        return OverlayMachine(self, run_id)

    def get_chroot(self, image_name: str) -> "Chroot":
        return OverlayChroot(self, image_name)


class BtrfsRunner(NspawnRunner):
    """
    nspawn-runner implementation optimized for btrfs filesystems
    """
    def get_machine(self, run_id: str) -> "Machine":
        return BtrfsMachine(self, run_id)

    def get_chroot(self, image_name: str) -> "Chroot":
        return BtrfsChroot(self, image_name)


class TmpfsRunner(NspawnRunner):
    """
    nspawn-runner implementation optimized for btrfs filesystems
    """
    def get_machine(self, run_id: str) -> "Machine":
        return TmpfsMachine(self, run_id)

    def get_chroot(self, image_name: str) -> "Chroot":
        return TmpfsChroot(self, image_name)


#
# Command line front-end
#

class Command:
    # Command name (as used in command line)
    # Defaults to the lowercased class name
    NAME: Optional[str] = None

    # Command description (as used in command line help)
    # Defaults to the strip()ped class docstring.
    DESC: Optional[str] = None

    def __init__(self, args):
        self.args = args
        self.setup_logging()
        self.nspawn_runner = NspawnRunner.create(DATA_DIR, self.args.ram_disk)

    def setup_logging(self):
        # Setup logging
        FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
        log_handler = logging.StreamHandler(sys.stderr)
        log_handler.setFormatter(logging.Formatter(FORMAT))
        if self.args.debug:
            log_handler.setLevel(logging.DEBUG)
        elif self.args.verbose:
            log_handler.setLevel(logging.INFO)
        else:
            log_handler.setLevel(logging.WARN)
        root_logger = logging.getLogger()
        root_logger.addHandler(log_handler)
        root_logger.setLevel(logging.DEBUG)

    @classmethod
    def get_name(cls):
        if cls.NAME is not None:
            return cls.NAME
        return cls.__name__.lower()

    @classmethod
    def make_subparser(cls, subparsers):
        desc = cls.DESC
        if desc is None:
            desc = cls.__doc__.strip()

        parser = subparsers.add_parser(cls.get_name(), help=desc)
        parser.set_defaults(handler=cls)
        return parser


class RunMixin:
    """
    Common implementation for commands that manage runs
    """
    @classmethod
    def make_subparser(cls, subparsers):
        default_id = os.environ.get("CUSTOM_ENV_CI_JOB_ID")

        parser = super().make_subparser(subparsers)
        parser.add_argument("--id", action="store", default=default_id,
                            help="ID for this CI run. Default: taken from $CUSTOM_ENV_CI_JOB_ID")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        if self.args.id is None:
            raise Fail("run ID not provided with --id and not found in the environment")

        self.machine = self.nspawn_runner.get_machine(self.args.id)


class SetupMixin:
    """
    Common implementation for commands that perform setups of chroots or runs
    """
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.nspawn_runner.setup()


class ChrootMixin:
    """
    Common implementation for commands that work with a chroot
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("image", action="store", nargs="?",
                            help="chroot name. Default: taken from $CUSTOM_ENV_CI_JOB_IMAGE")
        parser.add_argument("--default-image", action="store",
                            help="chroot name when image is not passed and $CUSTOM_ENV_CI_JOB_IMAGE is not set")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        image = self.args.image
        if image is None:
            image = os.environ.get("CUSTOM_ENV_CI_JOB_IMAGE")
        if image is None:
            image = self.args.default_image
        if image is None:
            raise Fail("Please provide an image name, or set $CUSTOM_ENV_CI_JOB_IMAGE")
        # map docker url to image name, drop the "base:" prefix
        image = os.path.basename(image).split(":", 2)[-1]
        if image.startswith("."):
            raise Fail("Image names cannot start with '.'")

        self.chroot = self.nspawn_runner.get_chroot(image)


class ChrootCreate(ChrootMixin, SetupMixin, Command):
    """
    create a chroot that serves as a base for ephemeral machines
    """
    NAME = "chroot-create"
    FALLBACK_SUITE = "unstable"

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--suite", action="store",
                            help=f"debootstrap suite. Default: from chroot config file, or {cls.FALLBACK_SUITE}")
        return parser

    def run(self):
        self.chroot.must_not_exist()
        suite = self.args.suite
        if suite is None:
            suite = self.chroot.config.get("chroot_suite")
        if suite is None:
            suite = self.FALLBACK_SUITE
        self.chroot.create(suite)
        playbook = self.chroot.config_file_path()
        if playbook is not None:
            self.chroot.run_playbook(playbook)


class ChrootLogin(ChrootMixin, Command):
    """
    enter the chroot to perform maintenance
    """
    NAME = "chroot-login"

    def run(self):
        self.chroot.must_exist()
        self.chroot.maintenance_login()


class ChrootMaintenance(Command):
    """
    perform routine maintenance of chroots
    """
    NAME = "chroot-maintenance"

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("image", action="store", nargs="?",
                            help="chroot name. Default: taken from $CUSTOM_ENV_CI_JOB_IMAGE")
        return parser

    def run(self):
        if self.args.image:
            chroot = self.nspawn_runner.get_chroot(self.args.image)
            chroot.run_maintenance()
        else:
            chroots = self.nspawn_runner.scan_chroots()
            for chroot in chroots:
                chroot.run_maintenance()


class ChrootList(Command):
    """
    list available chroots
    """
    NAME = "chroot-list"

    def run(self):
        chroots = self.nspawn_runner.scan_chroots()
        for chroot in chroots:
            print(chroot.image_name, chroot.chroot_dir)


class Prepare(ChrootMixin, SetupMixin, RunMixin, Command):
    """
    start an ephemeral system for a CI run
    """
    def run(self):
        self.chroot.must_exist()
        self.machine.start(self.chroot)


class Run(RunMixin, Command):
    """
    run a command inside a CI machine
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--shell", action="store", default="/bin/bash",
                            help="shell to use to run the script. Default: $(default)s")
        parser.add_argument("script", action="store",
                            help="script to run")
        parser.add_argument("description", action="store", nargs="?",
                            help="optional description for this script")
        return parser

    def run(self):
        self.machine.run(self.args.shell, self.args.script)


class Cleanup(RunMixin, Command):
    """
    cleanup a CI machine after it's run
    """
    def run(self):
        self.machine.terminate()


class GitlabConfig(Command):
    """
    configuration step for gitlab-runner
    """
    NAME = "gitlab-config"

    def run(self):
        # Nothing to do
        pass


class Toml(Command):
    """
    output the toml configuration for the custom runner
    """
    def run(self):
        argv0 = os.path.abspath(sys.argv[0])
        print(f"""
[[runners]]
name="nspawn-runner"
url="TODO"
token="TODO"
executor = "custom"
builds_dir = "{self.nspawn_runner.gitlab_build_dir}"
cache_dir = "{self.nspawn_runner.gitlab_cache_dir}"
[runners.custom_build_dir]
[runners.cache]
  [runners.cache.s3]
  [runners.cache.gcs]
  [runners.cache.azure]
[runners.custom]
  config_exec = "{argv0}"
  config_args = ["gitlab-config"]
  config_exec_timeout = 200
  prepare_exec = "{argv0}"
  prepare_args = ["--verbose", "prepare", "--default-image=unstable"]
  prepare_exec_timeout = 200
  run_exec = "{argv0}"
  run_args = ["run"]
  cleanup_exec = "{argv0}"
  cleanup_args = ["cleanup"]
  cleanup_exec_timeout = 200
  graceful_kill_timeout = 200
  force_kill_timeout = 200
""".lstrip())


def main():
    parser = argparse.ArgumentParser(description="Manage systemd-nspawn machines for CI runs.")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="verbose output")
    parser.add_argument("--ram-disk", action = "store_true", help="use ram disks")
    subparsers = parser.add_subparsers(help="sub-command help", dest="command")

    ChrootList.make_subparser(subparsers)
    ChrootCreate.make_subparser(subparsers)
    ChrootLogin.make_subparser(subparsers)
    ChrootMaintenance.make_subparser(subparsers)
    Prepare.make_subparser(subparsers)
    Run.make_subparser(subparsers)
    Cleanup.make_subparser(subparsers)
    GitlabConfig.make_subparser(subparsers)
    Toml.make_subparser(subparsers)

    args = parser.parse_args()
    if not hasattr(args, "handler"):
        parser.print_help()
    else:
        handler = args.handler(args)
        res = handler.run()
        if res is not None:
            sys.exit(res)


if __name__ == "__main__":
    try:
        main()
    except Fail as e:
        print(e, file=sys.stderr)
        # Use $SYSTEM_FAILURE_EXIT_CODE as exit code if provided
        exit_code = int(os.environ.get("SYSTEM_FAILURE_EXIT_CODE", 1))
        sys.exit(exit_code)
    except Success:
        pass
    except Exception:
        import traceback
        traceback.print_exc()
        # Use $SYSTEM_FAILURE_EXIT_CODE as exit code if provided
        exit_code = int(os.environ.get("SYSTEM_FAILURE_EXIT_CODE", 1))
        sys.exit(exit_code)
